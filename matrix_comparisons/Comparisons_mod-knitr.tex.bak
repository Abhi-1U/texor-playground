\documentclass{article}\usepackage[]{graphicx}\usepackage[]{xcolor}
% maxwidth is the original width if it is less than linewidth
% otherwise use linewidth (to make sure the graphics do not exceed the margin)
\makeatletter
\def\maxwidth{ %
  \ifdim\Gin@nat@width>\linewidth
    \linewidth
  \else
    \Gin@nat@width
  \fi
}
\makeatother

\definecolor{fgcolor}{rgb}{0.345, 0.345, 0.345}
\newcommand{\hlnum}[1]{\textcolor[rgb]{0.686,0.059,0.569}{#1}}%
\newcommand{\hlstr}[1]{\textcolor[rgb]{0.192,0.494,0.8}{#1}}%
\newcommand{\hlcom}[1]{\textcolor[rgb]{0.678,0.584,0.686}{\textit{#1}}}%
\newcommand{\hlopt}[1]{\textcolor[rgb]{0,0,0}{#1}}%
\newcommand{\hlstd}[1]{\textcolor[rgb]{0.345,0.345,0.345}{#1}}%
\newcommand{\hlkwa}[1]{\textcolor[rgb]{0.161,0.373,0.58}{\textbf{#1}}}%
\newcommand{\hlkwb}[1]{\textcolor[rgb]{0.69,0.353,0.396}{#1}}%
\newcommand{\hlkwc}[1]{\textcolor[rgb]{0.333,0.667,0.333}{#1}}%
\newcommand{\hlkwd}[1]{\textcolor[rgb]{0.737,0.353,0.396}{\textbf{#1}}}%
\let\hlipl\hlkwb

\usepackage{framed}
\makeatletter
\newenvironment{kframe}{%
 \def\at@end@of@kframe{}%
 \ifinner\ifhmode%
  \def\at@end@of@kframe{\end{minipage}}%
  \begin{minipage}{\columnwidth}%
 \fi\fi%
 \def\FrameCommand##1{\hskip\@totalleftmargin \hskip-\fboxsep
 \colorbox{shadecolor}{##1}\hskip-\fboxsep
     % There is no \\@totalrightmargin, so:
     \hskip-\linewidth \hskip-\@totalleftmargin \hskip\columnwidth}%
 \MakeFramed {\advance\hsize-\width
   \@totalleftmargin\z@ \linewidth\hsize
   \@setminipage}}%
 {\par\unskip\endMakeFramed%
 \at@end@of@kframe}
\makeatother

\definecolor{shadecolor}{rgb}{.97, .97, .97}
\definecolor{messagecolor}{rgb}{0, 0, 0}
\definecolor{warningcolor}{rgb}{1, 0, 1}
\definecolor{errorcolor}{rgb}{1, 0, 0}
\newenvironment{knitrout}{}{} % an empty environment to be redefined in TeX

\usepackage{alltt}
\usepackage{myVignette}
\usepackage[authoryear,round]{natbib}
\bibliographystyle{plainnat}
%%\VignetteIndexEntry{Comparisons of Least Squares calculation speeds}
%%\VignetteDepends{Matrix,datasets,stats,utils}
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\begin{document}



\setkeys{Gin}{width=\textwidth}
\title{Comparing Least Squares Calculations}
\author{Douglas Bates\\R Development Core Team\\\email{Douglas.Bates@R-project.org}}
\date{\today}
\maketitle
\begin{abstract}
  Many statistics methods require one or more least squares problems
  to be solved.  There are several ways to perform this calculation,
  using objects from the base R system and using objects in the
  classes defined in the \code{Matrix} package.

  We compare the speed of some of these methods on a very small
  example and on a example for which the model matrix is large and
  sparse.
\end{abstract}


\section{Linear least squares calculations}
\label{sec:LeastSquares}

Many statistical techniques require least squares solutions
\begin{equation}
  \label{eq:LeastSquares}
  \widehat{\bm{\beta}}=
  \arg\min_{\bm{\beta}}\left\|\bm{y}-\bX\bm{\beta}\right\|^2
\end{equation}
where $\bX$ is an $n\times p$ model matrix ($p\leq n$), $\bm{y}$ is
$n$-dimensional and $\bm{\beta}$ is $p$ dimensional.  Most statistics
texts state that the solution to (\ref{eq:LeastSquares}) is
\begin{equation}
  \label{eq:XPX}
  \widehat{\bm{\beta}}=\left(\bX\trans\bX\right)^{-1}\bX\trans\bm{y}
\end{equation}
when $\bX$ has full column rank (i.e. the columns of $\bX$ are
linearly independent) and all too frequently it is calculated in
exactly this way.


\subsection{A small example}
\label{sec:smallLSQ}

As an example, let's create a model matrix, \code{mm}, and corresponding
response vector, \code{y}, for a simple linear regression model using
the \code{Formaldehyde} data.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{data}\hlstd{(Formaldehyde,} \hlkwc{package} \hlstd{=} \hlstr{"datasets"}\hlstd{)}
\hlkwd{str}\hlstd{(Formaldehyde)}
\end{alltt}
\begin{verbatim}
## 'data.frame':	6 obs. of  2 variables:
##  $ carb  : num  0.1 0.3 0.5 0.6 0.7 0.9
##  $ optden: num  0.086 0.269 0.446 0.538 0.626 0.782
\end{verbatim}
\begin{alltt}
\hlstd{(m} \hlkwb{<-} \hlkwd{cbind}\hlstd{(}\hlnum{1}\hlstd{, Formaldehyde}\hlopt{$}\hlstd{carb))}
\end{alltt}
\begin{verbatim}
##      [,1] [,2]
## [1,]    1  0.1
## [2,]    1  0.3
## [3,]    1  0.5
## [4,]    1  0.6
## [5,]    1  0.7
## [6,]    1  0.9
\end{verbatim}
\begin{alltt}
\hlstd{(yo} \hlkwb{<-} \hlstd{Formaldehyde}\hlopt{$}\hlstd{optden)}
\end{alltt}
\begin{verbatim}
## [1] 0.086 0.269 0.446 0.538 0.626 0.782
\end{verbatim}
\end{kframe}
\end{knitrout}
Using \code{t} to evaluate
the transpose, \code{solve} to take an inverse, and the \code{\%*\%}
operator for matrix multiplication, we can translate \ref{eq:XPX} into
the \Slang{} as
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{solve}\hlstd{(}\hlkwd{t}\hlstd{(m)} \hlopt{%*%} \hlstd{m)} \hlopt{%*%} \hlkwd{t}\hlstd{(m)} \hlopt{%*%} \hlstd{yo}
\end{alltt}
\begin{verbatim}
##             [,1]
## [1,] 0.005085714
## [2,] 0.876285714
\end{verbatim}
\end{kframe}
\end{knitrout}

On modern computers this calculation is performed so quickly that it cannot
be timed accurately in \RR{}
\footnote{From R version 2.2.0, \code{system.time()} has default argument
  \code{gcFirst = TRUE} which is assumed and relevant for all subsequent timings}
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{system.time}\hlstd{(}\hlkwd{solve}\hlstd{(}\hlkwd{t}\hlstd{(m)} \hlopt{%*%} \hlstd{m)} \hlopt{%*%} \hlkwd{t}\hlstd{(m)} \hlopt{%*%} \hlstd{yo)}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##       0       0       0
\end{verbatim}
\end{kframe}
\end{knitrout}
and it provides essentially the same results as the standard
\code{lm.fit} function that is called by \code{lm}.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{dput}\hlstd{(}\hlkwd{c}\hlstd{(}\hlkwd{solve}\hlstd{(}\hlkwd{t}\hlstd{(m)} \hlopt{%*%} \hlstd{m)} \hlopt{%*%} \hlkwd{t}\hlstd{(m)} \hlopt{%*%} \hlstd{yo))}
\end{alltt}
\begin{verbatim}
## c(0.00508571428571428, 0.876285714285715)
\end{verbatim}
\begin{alltt}
\hlkwd{dput}\hlstd{(}\hlkwd{unname}\hlstd{(}\hlkwd{lm.fit}\hlstd{(m, yo)}\hlopt{$}\hlstd{coefficients))}
\end{alltt}
\begin{verbatim}
## c(0.00508571428571408, 0.876285714285715)
\end{verbatim}
\end{kframe}
\end{knitrout}
%$

\subsection{A large example}
\label{sec:largeLSQ}

For a large, ill-conditioned least squares problem, such as that
described in \citet{koen:ng:2003}, the literal translation of
(\ref{eq:XPX}) does not perform well.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{library}\hlstd{(Matrix)}
\hlkwd{data}\hlstd{(KNex,} \hlkwc{package} \hlstd{=} \hlstr{"Matrix"}\hlstd{)}
 \hlstd{y} \hlkwb{<-} \hlstd{KNex}\hlopt{$}\hlstd{y}
\hlstd{mm} \hlkwb{<-} \hlkwd{as}\hlstd{(KNex}\hlopt{$}\hlstd{mm,} \hlstr{"matrix"}\hlstd{)} \hlcom{# full traditional matrix}
\hlkwd{dim}\hlstd{(mm)}
\end{alltt}
\begin{verbatim}
## [1] 1850  712
\end{verbatim}
\begin{alltt}
\hlkwd{system.time}\hlstd{(naive.sol} \hlkwb{<-} \hlkwd{solve}\hlstd{(}\hlkwd{t}\hlstd{(mm)} \hlopt{%*%} \hlstd{mm)} \hlopt{%*%} \hlkwd{t}\hlstd{(mm)} \hlopt{%*%} \hlstd{y)}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##    1.52    0.03    1.54
\end{verbatim}
\end{kframe}
\end{knitrout}

Because the calculation of a ``cross-product'' matrix, such as
$\bX\trans\bX$ or $\bX\trans\bm{y}$, is a common operation in
statistics, the \code{crossprod} function has been provided to do
this efficiently.  In the single argument form \code{crossprod(mm)}
calculates $\bX\trans\bX$, taking advantage of the symmetry of the
product.  That is, instead of calculating the $712^2=506944$ elements of
$\bX\trans\bX$ separately, it only calculates the $(712\cdot
713)/2=253828$ elements in the upper triangle and replicates them in
the lower triangle. Furthermore, there is no need to calculate the
inverse of a matrix explicitly when solving a
linear system of equations.  When the two argument form of the \code{solve}
function is used the linear system
\begin{equation}
  \label{eq:LSQsol}
  \left(\bX\trans\bX\right) \widehat{\bm{\beta}} = \bX\trans\by
\end{equation}
is solved directly.

Combining these optimizations we obtain
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{system.time}\hlstd{(cpod.sol} \hlkwb{<-} \hlkwd{solve}\hlstd{(}\hlkwd{crossprod}\hlstd{(mm),} \hlkwd{crossprod}\hlstd{(mm,y)))}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##    0.58    0.00    0.58
\end{verbatim}
\begin{alltt}
\hlkwd{all.equal}\hlstd{(naive.sol, cpod.sol)}
\end{alltt}
\begin{verbatim}
## [1] TRUE
\end{verbatim}
\end{kframe}
\end{knitrout}

On this computer (2.0 GHz Pentium-4, 1 GB Memory, Goto's BLAS, in Spring
2004) the
crossprod form of the calculation is about four times as fast as the
naive calculation.  In fact, the entire crossprod solution is
faster than simply calculating $\bX\trans\bX$ the naive way.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{system.time}\hlstd{(}\hlkwd{t}\hlstd{(mm)} \hlopt{%*%} \hlstd{mm)}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##    0.64    0.01    0.66
\end{verbatim}
\end{kframe}
\end{knitrout}

Note that in newer versions of \RR{} and the BLAS library (as of summer
2007), \RR's \code{\%*\%} is able to detect the many zeros in \code{mm} and
shortcut many operations, and is hence much faster for such a sparse matrix
than \code{crossprod} which currently does not make use of such
optimizations.  This is not the case when \RR{} is linked against an
optimized BLAS library such as GOTO or ATLAS.
%%
Also, for fully dense matrices, \code{crossprod()} indeed remains faster
(by a factor of two, typically) independently of the BLAS library:
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{fm} \hlkwb{<-} \hlstd{mm}
\hlkwd{set.seed}\hlstd{(}\hlnum{11}\hlstd{)}
\hlstd{fm[]} \hlkwb{<-} \hlkwd{rnorm}\hlstd{(}\hlkwd{length}\hlstd{(fm))}
\hlkwd{system.time}\hlstd{(c1} \hlkwb{<-} \hlkwd{t}\hlstd{(fm)} \hlopt{%*%} \hlstd{fm)}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##    0.61    0.00    0.61
\end{verbatim}
\begin{alltt}
\hlkwd{system.time}\hlstd{(c2} \hlkwb{<-} \hlkwd{crossprod}\hlstd{(fm))}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##    0.48    0.00    0.49
\end{verbatim}
\begin{alltt}
\hlkwd{stopifnot}\hlstd{(}\hlkwd{all.equal}\hlstd{(c1, c2,} \hlkwc{tol} \hlstd{=} \hlnum{1e-12}\hlstd{))}
\end{alltt}
\end{kframe}
\end{knitrout}


\subsection{Least squares calculations with Matrix classes}
\label{sec:MatrixLSQ}

The \code{crossprod} function applied to a single matrix takes
advantage of symmetry when calculating the product but does not retain
the information that the product is symmetric (and positive
semidefinite).  As a result the solution of (\ref{eq:LSQsol}) is
performed using general linear system solver based on an LU
decomposition when it would be faster, and more stable numerically, to
use a Cholesky decomposition.  The Cholesky decomposition could be used
but it is rather awkward
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{system.time}\hlstd{(ch} \hlkwb{<-} \hlkwd{chol}\hlstd{(}\hlkwd{crossprod}\hlstd{(mm)))}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##    0.55    0.03    0.58
\end{verbatim}
\begin{alltt}
\hlkwd{system.time}\hlstd{(chol.sol} \hlkwb{<-}
            \hlkwd{backsolve}\hlstd{(ch,} \hlkwd{forwardsolve}\hlstd{(ch,} \hlkwd{crossprod}\hlstd{(mm, y),}
                                       \hlkwc{upper} \hlstd{=} \hlnum{TRUE}\hlstd{,} \hlkwc{trans} \hlstd{=} \hlnum{TRUE}\hlstd{)))}
\end{alltt}
\begin{verbatim}
##    user  system elapsed 
##       0       0       0
\end{verbatim}
\begin{alltt}
\hlkwd{stopifnot}\hlstd{(}\hlkwd{all.equal}\hlstd{(chol.sol, naive.sol))}
\end{alltt}
\end{kframe}
\end{knitrout}

The \code{Matrix} package uses the S4 class system
\citep{R:Chambers:1998} to retain information on the structure of
matrices from the intermediate calculations.  A general matrix in
dense storage, created by the \code{Matrix} function, has class
\code{"dgeMatrix"} but its cross-product has class \code{"dpoMatrix"}.
The \code{solve} methods for the \code{"dpoMatrix"} class use the
Cholesky decomposition.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{mm} \hlkwb{<-} \hlkwd{as}\hlstd{(KNex}\hlopt{$}\hlstd{mm,} \hlstr{"denseMatrix"}\hlstd{)}
\hlkwd{class}\hlstd{(}\hlkwd{crossprod}\hlstd{(mm))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in crossprod(x, y): requires numeric/complex matrix/vector arguments}}\begin{alltt}
\hlkwd{system.time}\hlstd{(Mat.sol} \hlkwb{<-} \hlkwd{solve}\hlstd{(}\hlkwd{crossprod}\hlstd{(mm),} \hlkwd{crossprod}\hlstd{(mm, y)))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in crossprod(x, y): requires numeric/complex matrix/vector arguments}}

{\ttfamily\noindent\itshape\color{messagecolor}{\#\# Timing stopped at: 0 0 0}}\begin{alltt}
\hlkwd{stopifnot}\hlstd{(}\hlkwd{all.equal}\hlstd{(naive.sol,} \hlkwd{unname}\hlstd{(}\hlkwd{as}\hlstd{(Mat.sol,}\hlstr{"matrix"}\hlstd{))))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in eval(expr, envir, enclos): object 'Mat.sol' not found}}\end{kframe}
\end{knitrout}

Furthermore, any method that calculates a
decomposition or factorization stores the resulting factorization with
the original object so that it can be reused without recalculation.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{xpx} \hlkwb{<-} \hlkwd{crossprod}\hlstd{(mm)}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in crossprod(x, y): requires numeric/complex matrix/vector arguments}}\begin{alltt}
\hlstd{xpy} \hlkwb{<-} \hlkwd{crossprod}\hlstd{(mm, y)}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in crossprod(x, y): requires numeric/complex matrix/vector arguments}}\begin{alltt}
\hlkwd{system.time}\hlstd{(}\hlkwd{solve}\hlstd{(xpx, xpy))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in eval(expr, envir, enclos): object 'xpx' not found}}

{\ttfamily\noindent\itshape\color{messagecolor}{\#\# Timing stopped at: 0 0 0}}\begin{alltt}
\hlkwd{system.time}\hlstd{(}\hlkwd{solve}\hlstd{(xpx, xpy))} \hlcom{# reusing factorization}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in eval(expr, envir, enclos): object 'xpx' not found}}

{\ttfamily\noindent\itshape\color{messagecolor}{\#\# Timing stopped at: 0 0 0}}\end{kframe}
\end{knitrout}

The model matrix \code{mm} is sparse; that is, most of the elements of
\code{mm} are zero.  The \code{Matrix} package incorporates special
methods for sparse matrices, which produce the fastest results of all.

\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{mm} \hlkwb{<-} \hlstd{KNex}\hlopt{$}\hlstd{mm}
\hlkwd{class}\hlstd{(mm)}
\end{alltt}
\begin{verbatim}
## [1] "dgCMatrix"
## attr(,"package")
## [1] "Matrix"
\end{verbatim}
\begin{alltt}
\hlkwd{system.time}\hlstd{(sparse.sol} \hlkwb{<-} \hlkwd{solve}\hlstd{(}\hlkwd{crossprod}\hlstd{(mm),} \hlkwd{crossprod}\hlstd{(mm, y)))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in crossprod(x, y): requires numeric/complex matrix/vector arguments}}

{\ttfamily\noindent\itshape\color{messagecolor}{\#\# Timing stopped at: 0 0 0}}\begin{alltt}
\hlkwd{stopifnot}\hlstd{(}\hlkwd{all.equal}\hlstd{(naive.sol,} \hlkwd{unname}\hlstd{(}\hlkwd{as}\hlstd{(sparse.sol,} \hlstr{"matrix"}\hlstd{))))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in eval(expr, envir, enclos): object 'sparse.sol' not found}}\end{kframe}
\end{knitrout}

As with other classes in the \code{Matrix} package, the
\code{dsCMatrix} retains any factorization that has been calculated
although, in this case, the decomposition is so fast that it is
difficult to determine the difference in the solution times.

\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{xpx} \hlkwb{<-} \hlkwd{crossprod}\hlstd{(mm)}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in crossprod(x, y): requires numeric/complex matrix/vector arguments}}\begin{alltt}
\hlstd{xpy} \hlkwb{<-} \hlkwd{crossprod}\hlstd{(mm, y)}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in crossprod(x, y): requires numeric/complex matrix/vector arguments}}\begin{alltt}
\hlkwd{system.time}\hlstd{(}\hlkwd{solve}\hlstd{(xpx, xpy))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in eval(expr, envir, enclos): object 'xpx' not found}}

{\ttfamily\noindent\itshape\color{messagecolor}{\#\# Timing stopped at: 0 0 0}}\begin{alltt}
\hlkwd{system.time}\hlstd{(}\hlkwd{solve}\hlstd{(xpx, xpy))}
\end{alltt}


{\ttfamily\noindent\bfseries\color{errorcolor}{\#\# Error in eval(expr, envir, enclos): object 'xpx' not found}}

{\ttfamily\noindent\itshape\color{messagecolor}{\#\# Timing stopped at: 0 0 0}}\end{kframe}
\end{knitrout}

\subsection*{Session Info}

\begin{kframe}
\begin{alltt}
\hlkwd{toLatex}\hlstd{(}\hlkwd{sessionInfo}\hlstd{())}
\end{alltt}
\end{kframe}\begin{itemize}\raggedright
  \item R version 4.3.1 (2023-06-16 ucrt), \verb|x86_64-w64-mingw32|
  \item Locale: \verb|LC_COLLATE=Chinese (Simplified)_China.utf8|, \verb|LC_CTYPE=C|, \verb|LC_MONETARY=Chinese (Simplified)_China.utf8|, \verb|LC_NUMERIC=C|, \verb|LC_TIME=Chinese (Simplified)_China.utf8|
  \item System code page: \verb|65001|
  \item Time zone: \verb|Asia/Hong_Kong|
  \item TZcode source: \verb|internal|
  \item Running under: \verb|Windows 10 x64 (build 19044)|
  \item Matrix products: default
  \item Base packages: base, datasets, graphics, grDevices,
    methods, stats, utils
  \item Other packages: devtools~2.4.5, knitr~1.46, Matrix~1.6-4,
    testthat~3.2.1, texor~1.3.0, usethis~2.2.2
  \item Loaded via a namespace (and not attached): askpass~1.2.0,
    BiocManager~1.30.23, brio~1.1.5, cachem~1.0.8, cli~3.6.2,
    compiler~4.3.1, desc~1.4.3, digest~0.6.35, ellipsis~0.3.2,
    evaluate~0.23, fastmap~1.1.1, fs~1.6.3, glue~1.7.0,
    grid~4.3.1, highr~0.10, htmltools~0.5.8, htmlwidgets~1.6.4,
    httpuv~1.6.13, hunspell~3.0.3, later~1.3.2, lattice~0.21-8,
    lifecycle~1.0.4, logger~0.3.0, magrittr~2.0.3, memoise~2.0.1,
    mime~0.12, miniUI~0.1.1.1, pdftools~3.4.0, pkgbuild~1.4.3,
    pkgload~1.3.3, profvis~0.3.8, promises~1.2.1, purrr~1.0.2,
    qpdf~1.3.3, R6~2.5.1, Rcpp~1.0.12, rebib~0.3.2,
    remotes~2.4.2.1, rjtools~1.0.13, rlang~1.1.3, rmarkdown~2.27,
    rprojroot~2.0.4, rstudioapi~0.16.0, sessioninfo~1.2.2,
    shiny~1.8.0, stringi~1.8.3, stringr~1.5.1, tinytex~0.51,
    tools~4.3.1, urlchecker~1.0.1, vctrs~0.6.5, whisker~0.4.1,
    withr~3.0.0, xfun~0.43, xtable~1.8-4, yaml~2.3.8, yesno~0.1.2
\end{itemize}



\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwa{if}\hlstd{(}\hlkwd{identical}\hlstd{(}\hlnum{1L}\hlstd{,} \hlkwd{grep}\hlstd{(}\hlstr{"linux"}\hlstd{, R.version[[}\hlstr{"os"}\hlstd{]]))) \{} \hlcom{## Linux - only ---}
 \hlstd{Scpu} \hlkwb{<-} \hlstd{sfsmisc}\hlopt{::}\hlkwd{Sys.procinfo}\hlstd{(}\hlstr{"/proc/cpuinfo"}\hlstd{)}
 \hlstd{Smem} \hlkwb{<-} \hlstd{sfsmisc}\hlopt{::}\hlkwd{Sys.procinfo}\hlstd{(}\hlstr{"/proc/meminfo"}\hlstd{)}
 \hlkwd{print}\hlstd{(Scpu[}\hlkwd{c}\hlstd{(}\hlstr{"model name"}\hlstd{,} \hlstr{"cpu MHz"}\hlstd{,} \hlstr{"cache size"}\hlstd{,} \hlstr{"bogomips"}\hlstd{)])}
 \hlkwd{print}\hlstd{(Smem[}\hlkwd{c}\hlstd{(}\hlstr{"MemTotal"}\hlstd{,} \hlstr{"SwapTotal"}\hlstd{)])}
\hlstd{\}}
\end{alltt}
\end{kframe}
\end{knitrout}


\end{document}
